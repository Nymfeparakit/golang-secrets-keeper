// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nymfeparakit/gophkeeper/server/internal/api/handlers (interfaces: AuthService)

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	reflect "reflect"

	dto "github.com/Nymfeparakit/gophkeeper/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// AddUserToContext mocks base method.
func (m *MockAuthService) AddUserToContext(arg0 context.Context, arg1 string) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToContext", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// AddUserToContext indicates an expected call of AddUserToContext.
func (mr *MockAuthServiceMockRecorder) AddUserToContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToContext", reflect.TypeOf((*MockAuthService)(nil).AddUserToContext), arg0, arg1)
}

// GetUserFromContext mocks base method.
func (m *MockAuthService) GetUserFromContext(arg0 context.Context) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFromContext", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetUserFromContext indicates an expected call of GetUserFromContext.
func (mr *MockAuthServiceMockRecorder) GetUserFromContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFromContext", reflect.TypeOf((*MockAuthService)(nil).GetUserFromContext), arg0)
}

// Login mocks base method.
func (m *MockAuthService) Login(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), arg0, arg1, arg2)
}

// ParseUserToken mocks base method.
func (m *MockAuthService) ParseUserToken(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseUserToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUserToken indicates an expected call of ParseUserToken.
func (mr *MockAuthServiceMockRecorder) ParseUserToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUserToken", reflect.TypeOf((*MockAuthService)(nil).ParseUserToken), arg0)
}

// Register mocks base method.
func (m *MockAuthService) Register(arg0 context.Context, arg1 *dto.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockAuthServiceMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthService)(nil).Register), arg0, arg1)
}
