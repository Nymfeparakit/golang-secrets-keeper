// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nymfeparakit/gophkeeper/server/internal/api/handlers (interfaces: SecretsService)

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	reflect "reflect"

	dto "github.com/Nymfeparakit/gophkeeper/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockSecretsService is a mock of SecretsService interface.
type MockSecretsService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsServiceMockRecorder
}

// MockSecretsServiceMockRecorder is the mock recorder for MockSecretsService.
type MockSecretsServiceMockRecorder struct {
	mock *MockSecretsService
}

// NewMockSecretsService creates a new mock instance.
func NewMockSecretsService(ctrl *gomock.Controller) *MockSecretsService {
	mock := &MockSecretsService{ctrl: ctrl}
	mock.recorder = &MockSecretsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsService) EXPECT() *MockSecretsServiceMockRecorder {
	return m.recorder
}

// AddCardInfo mocks base method.
func (m *MockSecretsService) AddCardInfo(arg0 context.Context, arg1 *dto.CardInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCardInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCardInfo indicates an expected call of AddCardInfo.
func (mr *MockSecretsServiceMockRecorder) AddCardInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCardInfo", reflect.TypeOf((*MockSecretsService)(nil).AddCardInfo), arg0, arg1)
}

// AddCredentials mocks base method.
func (m *MockSecretsService) AddCredentials(arg0 context.Context, arg1 *dto.LoginPassword) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCredentials", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCredentials indicates an expected call of AddCredentials.
func (mr *MockSecretsServiceMockRecorder) AddCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCredentials", reflect.TypeOf((*MockSecretsService)(nil).AddCredentials), arg0, arg1)
}

// AddTextInfo mocks base method.
func (m *MockSecretsService) AddTextInfo(arg0 context.Context, arg1 *dto.TextInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTextInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTextInfo indicates an expected call of AddTextInfo.
func (mr *MockSecretsServiceMockRecorder) AddTextInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTextInfo", reflect.TypeOf((*MockSecretsService)(nil).AddTextInfo), arg0, arg1)
}

// ListSecrets mocks base method.
func (m *MockSecretsService) ListSecrets(arg0 context.Context, arg1 string) (dto.SecretsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets", arg0, arg1)
	ret0, _ := ret[0].(dto.SecretsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockSecretsServiceMockRecorder) ListSecrets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockSecretsService)(nil).ListSecrets), arg0, arg1)
}
