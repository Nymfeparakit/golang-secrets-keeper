// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nymfeparakit/gophkeeper/server/proto/items (interfaces: ItemsManagementClient)

// Package mock_items is a generated GoMock package.
package mock_items

import (
	context "context"
	reflect "reflect"

	items "github.com/Nymfeparakit/gophkeeper/server/proto/items"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockItemsManagementClient is a mock of ItemsManagementClient interface.
type MockItemsManagementClient struct {
	ctrl     *gomock.Controller
	recorder *MockItemsManagementClientMockRecorder
}

// MockItemsManagementClientMockRecorder is the mock recorder for MockItemsManagementClient.
type MockItemsManagementClientMockRecorder struct {
	mock *MockItemsManagementClient
}

// NewMockItemsManagementClient creates a new mock instance.
func NewMockItemsManagementClient(ctrl *gomock.Controller) *MockItemsManagementClient {
	mock := &MockItemsManagementClient{ctrl: ctrl}
	mock.recorder = &MockItemsManagementClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemsManagementClient) EXPECT() *MockItemsManagementClientMockRecorder {
	return m.recorder
}

// AddCardInfo mocks base method.
func (m *MockItemsManagementClient) AddCardInfo(arg0 context.Context, arg1 *items.CardInfo, arg2 ...grpc.CallOption) (*items.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddCardInfo", varargs...)
	ret0, _ := ret[0].(*items.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCardInfo indicates an expected call of AddCardInfo.
func (mr *MockItemsManagementClientMockRecorder) AddCardInfo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCardInfo", reflect.TypeOf((*MockItemsManagementClient)(nil).AddCardInfo), varargs...)
}

// AddPassword mocks base method.
func (m *MockItemsManagementClient) AddPassword(arg0 context.Context, arg1 *items.Password, arg2 ...grpc.CallOption) (*items.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddPassword", varargs...)
	ret0, _ := ret[0].(*items.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPassword indicates an expected call of AddPassword.
func (mr *MockItemsManagementClientMockRecorder) AddPassword(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPassword", reflect.TypeOf((*MockItemsManagementClient)(nil).AddPassword), varargs...)
}

// AddTextInfo mocks base method.
func (m *MockItemsManagementClient) AddTextInfo(arg0 context.Context, arg1 *items.TextInfo, arg2 ...grpc.CallOption) (*items.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTextInfo", varargs...)
	ret0, _ := ret[0].(*items.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTextInfo indicates an expected call of AddTextInfo.
func (mr *MockItemsManagementClientMockRecorder) AddTextInfo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTextInfo", reflect.TypeOf((*MockItemsManagementClient)(nil).AddTextInfo), varargs...)
}

// ListItems mocks base method.
func (m *MockItemsManagementClient) ListItems(arg0 context.Context, arg1 *items.EmptyRequest, arg2 ...grpc.CallOption) (*items.ListItemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListItems", varargs...)
	ret0, _ := ret[0].(*items.ListItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListItems indicates an expected call of ListItems.
func (mr *MockItemsManagementClientMockRecorder) ListItems(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListItems", reflect.TypeOf((*MockItemsManagementClient)(nil).ListItems), varargs...)
}
