// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: items.proto

package items

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ItemsManagementClient is the client API for ItemsManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemsManagementClient interface {
	AddPassword(ctx context.Context, in *Password, opts ...grpc.CallOption) (*AddResponse, error)
	AddCardInfo(ctx context.Context, in *CardInfo, opts ...grpc.CallOption) (*AddResponse, error)
	AddTextInfo(ctx context.Context, in *TextInfo, opts ...grpc.CallOption) (*AddResponse, error)
	ListItems(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListItemResponse, error)
}

type itemsManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewItemsManagementClient(cc grpc.ClientConnInterface) ItemsManagementClient {
	return &itemsManagementClient{cc}
}

func (c *itemsManagementClient) AddPassword(ctx context.Context, in *Password, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/proto.ItemsManagement/AddPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsManagementClient) AddCardInfo(ctx context.Context, in *CardInfo, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/proto.ItemsManagement/AddCardInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsManagementClient) AddTextInfo(ctx context.Context, in *TextInfo, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/proto.ItemsManagement/AddTextInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsManagementClient) ListItems(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListItemResponse, error) {
	out := new(ListItemResponse)
	err := c.cc.Invoke(ctx, "/proto.ItemsManagement/ListItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemsManagementServer is the server API for ItemsManagement service.
// All implementations must embed UnimplementedItemsManagementServer
// for forward compatibility
type ItemsManagementServer interface {
	AddPassword(context.Context, *Password) (*AddResponse, error)
	AddCardInfo(context.Context, *CardInfo) (*AddResponse, error)
	AddTextInfo(context.Context, *TextInfo) (*AddResponse, error)
	ListItems(context.Context, *EmptyRequest) (*ListItemResponse, error)
	mustEmbedUnimplementedItemsManagementServer()
}

// UnimplementedItemsManagementServer must be embedded to have forward compatible implementations.
type UnimplementedItemsManagementServer struct {
}

func (UnimplementedItemsManagementServer) AddPassword(context.Context, *Password) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPassword not implemented")
}
func (UnimplementedItemsManagementServer) AddCardInfo(context.Context, *CardInfo) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCardInfo not implemented")
}
func (UnimplementedItemsManagementServer) AddTextInfo(context.Context, *TextInfo) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTextInfo not implemented")
}
func (UnimplementedItemsManagementServer) ListItems(context.Context, *EmptyRequest) (*ListItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}
func (UnimplementedItemsManagementServer) mustEmbedUnimplementedItemsManagementServer() {}

// UnsafeItemsManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemsManagementServer will
// result in compilation errors.
type UnsafeItemsManagementServer interface {
	mustEmbedUnimplementedItemsManagementServer()
}

func RegisterItemsManagementServer(s grpc.ServiceRegistrar, srv ItemsManagementServer) {
	s.RegisterService(&ItemsManagement_ServiceDesc, srv)
}

func _ItemsManagement_AddPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Password)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsManagementServer).AddPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ItemsManagement/AddPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsManagementServer).AddPassword(ctx, req.(*Password))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsManagement_AddCardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsManagementServer).AddCardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ItemsManagement/AddCardInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsManagementServer).AddCardInfo(ctx, req.(*CardInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsManagement_AddTextInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsManagementServer).AddTextInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ItemsManagement/AddTextInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsManagementServer).AddTextInfo(ctx, req.(*TextInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsManagement_ListItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsManagementServer).ListItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ItemsManagement/ListItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsManagementServer).ListItems(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemsManagement_ServiceDesc is the grpc.ServiceDesc for ItemsManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemsManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ItemsManagement",
	HandlerType: (*ItemsManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPassword",
			Handler:    _ItemsManagement_AddPassword_Handler,
		},
		{
			MethodName: "AddCardInfo",
			Handler:    _ItemsManagement_AddCardInfo_Handler,
		},
		{
			MethodName: "AddTextInfo",
			Handler:    _ItemsManagement_AddTextInfo_Handler,
		},
		{
			MethodName: "ListItems",
			Handler:    _ItemsManagement_ListItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "items.proto",
}
