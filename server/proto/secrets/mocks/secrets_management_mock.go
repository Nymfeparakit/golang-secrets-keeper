// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nymfeparakit/gophkeeper/server/proto/secrets (interfaces: SecretsManagementClient)

// Package mock_secrets is a generated GoMock package.
package mock_secrets

import (
	context "context"
	reflect "reflect"

	secrets "github.com/Nymfeparakit/gophkeeper/server/proto/secrets"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSecretsManagementClient is a mock of SecretsManagementClient interface.
type MockSecretsManagementClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsManagementClientMockRecorder
}

// MockSecretsManagementClientMockRecorder is the mock recorder for MockSecretsManagementClient.
type MockSecretsManagementClientMockRecorder struct {
	mock *MockSecretsManagementClient
}

// NewMockSecretsManagementClient creates a new mock instance.
func NewMockSecretsManagementClient(ctrl *gomock.Controller) *MockSecretsManagementClient {
	mock := &MockSecretsManagementClient{ctrl: ctrl}
	mock.recorder = &MockSecretsManagementClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsManagementClient) EXPECT() *MockSecretsManagementClientMockRecorder {
	return m.recorder
}

// AddCardInfo mocks base method.
func (m *MockSecretsManagementClient) AddCardInfo(arg0 context.Context, arg1 *secrets.CardInfo, arg2 ...grpc.CallOption) (*secrets.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddCardInfo", varargs...)
	ret0, _ := ret[0].(*secrets.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCardInfo indicates an expected call of AddCardInfo.
func (mr *MockSecretsManagementClientMockRecorder) AddCardInfo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCardInfo", reflect.TypeOf((*MockSecretsManagementClient)(nil).AddCardInfo), varargs...)
}

// AddCredentials mocks base method.
func (m *MockSecretsManagementClient) AddCredentials(arg0 context.Context, arg1 *secrets.Password, arg2 ...grpc.CallOption) (*secrets.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddCredentials", varargs...)
	ret0, _ := ret[0].(*secrets.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCredentials indicates an expected call of AddCredentials.
func (mr *MockSecretsManagementClientMockRecorder) AddCredentials(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCredentials", reflect.TypeOf((*MockSecretsManagementClient)(nil).AddCredentials), varargs...)
}

// AddTextInfo mocks base method.
func (m *MockSecretsManagementClient) AddTextInfo(arg0 context.Context, arg1 *secrets.TextInfo, arg2 ...grpc.CallOption) (*secrets.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTextInfo", varargs...)
	ret0, _ := ret[0].(*secrets.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTextInfo indicates an expected call of AddTextInfo.
func (mr *MockSecretsManagementClientMockRecorder) AddTextInfo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTextInfo", reflect.TypeOf((*MockSecretsManagementClient)(nil).AddTextInfo), varargs...)
}

// ListSecrets mocks base method.
func (m *MockSecretsManagementClient) ListSecrets(arg0 context.Context, arg1 *secrets.EmptyRequest, arg2 ...grpc.CallOption) (*secrets.ListSecretResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecrets", varargs...)
	ret0, _ := ret[0].(*secrets.ListSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockSecretsManagementClientMockRecorder) ListSecrets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockSecretsManagementClient)(nil).ListSecrets), varargs...)
}
