// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nymfeparakit/gophkeeper/client/internal/services (interfaces: AuthMetadataService)

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthMetadataService is a mock of AuthMetadataService interface.
type MockAuthMetadataService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMetadataServiceMockRecorder
}

// MockAuthMetadataServiceMockRecorder is the mock recorder for MockAuthMetadataService.
type MockAuthMetadataServiceMockRecorder struct {
	mock *MockAuthMetadataService
}

// NewMockAuthMetadataService creates a new mock instance.
func NewMockAuthMetadataService(ctrl *gomock.Controller) *MockAuthMetadataService {
	mock := &MockAuthMetadataService{ctrl: ctrl}
	mock.recorder = &MockAuthMetadataServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthMetadataService) EXPECT() *MockAuthMetadataServiceMockRecorder {
	return m.recorder
}

// AddAuthMetadata mocks base method.
func (m *MockAuthMetadataService) AddAuthMetadata(arg0 context.Context) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAuthMetadata", arg0)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAuthMetadata indicates an expected call of AddAuthMetadata.
func (mr *MockAuthMetadataServiceMockRecorder) AddAuthMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuthMetadata", reflect.TypeOf((*MockAuthMetadataService)(nil).AddAuthMetadata), arg0)
}
